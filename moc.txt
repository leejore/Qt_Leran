moc介绍
Meta Object Compiler简称moc，是	QT元对象的灵魂。moc在qmake阶段调用，生成moc_***.cpp，可以在makefile的链接。
/****************************************************************************
** Meta object code from reading C++ file 'mainwindow.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.3.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../QuitApp/mainwindow.h"
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'mainwindow.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.3.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_MainWindow_t {
    QByteArrayData data[5];
    char stringdata[81];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MainWindow_t, stringdata) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MainWindow_t qt_meta_stringdata_MainWindow = {
    {
QT_MOC_LITERAL(0, 0, 10),
QT_MOC_LITERAL(1, 11, 21),
QT_MOC_LITERAL(2, 33, 0),
QT_MOC_LITERAL(3, 34, 17),
QT_MOC_LITERAL(4, 52, 28)
    },
    "MainWindow\0sigafterbuttonclicked\0\0"
    "slotButtonClicked\0slotafterbuttonclickedbutton"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MainWindow[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       3,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    0,   29,    2, 0x06 /* Public */,

 // slots: name, argc, parameters, tag, flags
       3,    0,   30,    2, 0x0a /* Public */,
       4,    0,   31,    2, 0x0a /* Public */,

 // signals: parameters
    QMetaType::Void,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void MainWindow::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        MainWindow *_t = static_cast<MainWindow *>(_o);
        switch (_id) {
        case 0: _t->sigafterbuttonclicked(); break;
        case 1: _t->slotButtonClicked(); break;
        case 2: _t->slotafterbuttonclickedbutton(); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        void **func = reinterpret_cast<void **>(_a[1]);
        {
            typedef void (MainWindow::*_t)();
            if (*reinterpret_cast<_t *>(func) == static_cast<_t>(&MainWindow::sigafterbuttonclicked)) {
                *result = 0;
            }
        }
    }
    Q_UNUSED(_a);
}-

const QMetaObject MainWindow::staticMetaObject = {
    { &QMainWindow::staticMetaObject, qt_meta_stringdata_MainWindow.data,
      qt_meta_data_MainWindow,  qt_static_metacall, 0, 0}
};


const QMetaObject *MainWindow::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MainWindow::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_MainWindow.stringdata))
        return static_cast<void*>(const_cast< MainWindow*>(this));
    return QMainWindow::qt_metacast(_clname);
}

int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QMainWindow::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 3)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 3;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 3)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 3;
    }
    return _id;
}

// SIGNAL 0
void MainWindow::sigafterbuttonclicked()
{
    QMetaObject::activate(this, &staticMetaObject, 0, 0);//emit是个空宏，再次实现
}
QT_END_MOC_NAMESPACE
这是生成的mainwindow的moc_mainwidow.cpp，可以在makefile的链接。
moc工作：
1.扫描头文件，根据signals和slots关键字提取信号和槽的名字以及索引的信息，保存到qt_meta_stringdata_MainWindow中。
2.为类的方法、信号、槽、属性、枚举类型简历各种元信息，保存到qt_meta_data_MainWindow中。
3.实现Q_OBJECT的宏定义函数，初始化Q_OBJECTQMetaObject的静态实例staticMetaObject，把前面的元信息以及函数实现关联到StatiMetaObject实例上。
4.为类的信号生成模板代码。
先说以signal、
    static void activate(QObject *sender, int signal_index, void **argv);
    static void activate(QObject *sender, const QMetaObject *, int local_signal_index, void **argv);
    static void activate(QObject *sender, int signal_offset, int local_signal_index, void **argv);
	函数原型，下面是QMetaObject的数据成员部分。

 struct { // private data
        const QMetaObject *superdata;
        const QByteArrayData *stringdata;
        const uint *data;
        typedef void (*StaticMetacallFunction)(QObject *, QMetaObject::Call, int, void **);
        StaticMetacallFunction static_metacall;
        const QMetaObject * const *relatedMetaObjects;
        void *extradata; //reserved for future use
    } d;
	这是一匿名结构体，在const QMetaObject MainWindow::staticMetaObject = {
    { &QMainWindow::staticMetaObject, qt_meta_stringdata_MainWindow.data,
      qt_meta_data_MainWindow,  qt_static_metacall, 0, 0}
};这句初始化。把QMetaObject实例staticMetaObject联系了起来。
qt_meta_stringdata_MainWindow_t的钱五个数组保存了构造函数，信号，槽的信息，包括索引（从0开始，定义 了5个方法，索引为0-4）、方法名的长度，方法名在stringdata中的偏移量。
qt_meta_data_MainWindow数组带注释，包括信号的个数，方法的个数信息第一个字段代表索引的位置。名字保存在stringdata中。
qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)第一个参数QObject*，是mainwindow的实例指针，第二个是枚举值，代表类型，第三个是id抓哟_c取值为
QMetaObject::InvokeMetaMethod时,表示调用元方法，调用信号或者槽的序号，第四个是void*指针，为二级指针，当_c为QMetaObject::IndexOfMethod式使用。
    static void activate(QObject *sender, int signal_offset, int local_signal_index, void **argv);
	这个函数会出发槽函数。
	

